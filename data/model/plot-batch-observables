#!/usr/bin/env python3

import argparse
import itertools

import numpy as np
import h5py
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import seaborn as sns


def load_dsets(group, *keys):
    for k in keys:
        yield np.array(group[k])


def main():
    parser = argparse.ArgumentParser(
        description='plot batch observables')

    parser.add_argument('batch_observables_file',
                        help='HDF5 batch observables file')
    parser.add_argument('exp_data_file',
                        help='HDF5 experimental data file')
    parser.add_argument('plot_file', help='output pdf file')

    args = parser.parse_args()

    sns.set(palette='Blues_d', font_scale=1.2)

    id_parts = [
        ('pion',   r'\pi^\pm'),
        ('kaon',   r'K^\pm'),
        ('proton', r'p\bar p'),
    ]

    basic_plots = itertools.chain(
        [('dNch_deta', r'$dN_\mathrm{ch}/d\eta$')],
        [('dN_dy/{}'.format(name), r'${}\;dN/dy$'.format(symbol))
         for name, symbol in id_parts],
        [('mean_pT/{}'.format(name),
          r'${}\;\langle p_T \rangle$'.format(symbol))
         for name, symbol in id_parts],
        [('vn/{}'.format(n), '$v_' + str(n) + '\{2\}$')
         for n in [2, 3]],
        [('v3/v2 ratio', '$v_3 / v_2$')]
    )

    with \
            h5py.File(args.batch_observables_file, 'r') as model, \
            h5py.File(args.exp_data_file) as exp, \
            PdfPages(args.plot_file) as pdf:
        for key, title in basic_plots:
            print(key)

            if key == 'v3/v2 ratio':
                xmodel, v2 = load_dsets(model['vn/2'], 'x', 'Y')
                v3 = np.array(model['vn/3/Y'])
                Y = v3/v2
                xexp, v3 = load_dsets(exp['vn/3'], 'x', 'y')
                v2 = np.array(exp['vn/2/y'])[:v3.size]
                y = v3/v2
                yerr = None
            else:
                xmodel, Y = load_dsets(model[key], 'x', 'Y')
                xexp, y, yerr = load_dsets(exp[key], 'x', 'y', 'yerr')

            for i in Y:
                plt.plot(xmodel, i, lw=0.6, alpha=0.3)

            plt.errorbar(xexp, y, yerr=yerr, fmt='o', ms=5, lw=1.5, capsize=0,
                         color='0.4', zorder=1000)

            if key.startswith('dN'):
                plt.yscale('log')
            elif key.startswith('vn'):
                plt.ylim(ymin=0)

            plt.xlabel('Centrality %')
            plt.title(title)

            plt.tight_layout(pad=0)
            pdf.savefig()
            plt.close()


if __name__ == "__main__":
    main()
