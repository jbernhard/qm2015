#!/usr/bin/env python3

import argparse

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as tick
import h5py


fontsmall, fontnormal, fontlarge = 18, 24, 28
offblack = '#262626'

plt.rcdefaults()
plt.rcParams.update({
    'font.family': 'sans-serif',
    'font.sans-serif': ['Lato'],
    'mathtext.fontset': 'custom',
    'mathtext.default': 'it',
    'mathtext.rm': 'sans',
    'mathtext.it': 'sans:italic:medium',
    'mathtext.cal': 'sans',
    'font.size': fontnormal,
    'legend.fontsize': fontnormal,
    'axes.labelsize': fontnormal,
    'axes.titlesize': fontlarge,
    'xtick.labelsize': fontsmall,
    'ytick.labelsize': fontsmall,
    'font.weight': 400,
    'axes.labelweight': 400,
    'axes.titleweight': 400,
    'lines.linewidth': 1.5,
    'lines.markeredgewidth': 0,
    'patch.linewidth': 1.5,
    'axes.linewidth': 1,
    'xtick.major.width': 1,
    'ytick.major.width': 1,
    'xtick.minor.width': 1,
    'ytick.minor.width': 1,
    'xtick.major.size': 5,
    'ytick.major.size': 5,
    'xtick.minor.size': 3,
    'ytick.minor.size': 3,
    'xtick.major.pad': 8,
    'ytick.major.pad': 8,
    'text.color': offblack,
    'axes.edgecolor': offblack,
    'axes.labelcolor': offblack,
    'xtick.color': offblack,
    'ytick.color': offblack,
    'legend.numpoints': 1,
    'legend.scatterpoints': 1,
    'legend.frameon': False,
    'image.interpolation': 'none',
    'pdf.fonttype': 42
})


plot_functions = {}


def plot(f):
    def wrapper(*args, **kwargs):
        print(f.__name__)
        f(*args, **kwargs)
        plt.savefig('{}.pdf'.format(f.__name__))
        plt.close()

    plot_functions[f.__name__] = wrapper

    return wrapper


def finish(despine=True, remove_ticks=False, pad=0.1, h_pad=None, w_pad=None):
    fig = plt.gcf()

    for ax in fig.axes:
        if despine:
            for spine in 'top', 'right':
                ax.spines[spine].set_visible(False)

        if remove_ticks:
            for ax_name in 'xaxis', 'yaxis':
                getattr(ax, ax_name).set_ticks_position('none')
        else:
            ax.xaxis.set_ticks_position('bottom')
            ax.yaxis.set_ticks_position('left')

    fig.tight_layout(pad=pad, h_pad=h_pad, w_pad=w_pad)


def set_loc(ax, xy=None, nbins=5, steps=(1, 2, 3, 4, 10),
            prune=None, minor=0):
    if xy == 'x':
        axes = ax.xaxis,
    elif xy == 'y':
        axes = ax.yaxis,
    else:
        axes = ax.xaxis, ax.yaxis

    for axis in axes:
        axis.set_major_locator(
            tick.MaxNLocator(nbins=nbins, steps=steps, prune=prune)
        )
        if minor:
            axis.set_minor_locator(tick.AutoMinorLocator(minor))


@plot
def posterior(design, calibration, **kwargs):
    with h5py.File(design, 'r') as f:
        labels = list(f['parameters'])
        etas_hrg_index = 4
        indices = np.arange(len(labels)) != etas_hrg_index
        del labels[etas_hrg_index]
        ranges = np.array(f['range'])[indices]

    with h5py.File(calibration, 'r') as f:
        chain = np.array(f['chain']).T[indices]

    nxy = chain.shape[0]
    assert nxy == len(labels)

    normal_cmap, highlight_cmap = plt.cm.Blues, plt.cm.Oranges

    fig, axes = plt.subplots(
        nrows=nxy, ncols=nxy,
        sharex='col', sharey='row',
        figsize=(21, 21)
    )

    for n, (ax, c, lim) in enumerate(zip(axes.diagonal(), chain, ranges)):
        cmap = highlight_cmap if n in [1, 6, 7] else normal_cmap
        line_color = cmap(.8)
        fill_color = cmap(.5, alpha=.1)

        # override range for norm
        if n == 0:
            lim = 100, 150

        counts, edges = np.histogram(c, bins=100, range=lim)
        x = (edges[1:] + edges[:-1]) / 2
        y = .84 * (lim[1] - lim[0]) * counts / counts.max() + lim[0]
        ax.plot(x, y, lw=2, color=line_color)
        ax.fill_between(x, lim[0], y, color=fill_color, zorder=-10)

        if n in [0, 1, 3, 6, 7]:
            mode = x[y.argmax()]
            fmt_str = '{:#.2g}' if n == 1 else '{:#.3g}'
            ax.text(mode, lim[1], fmt_str.format(mode),
                    ha='left' if mode < 0.4*sum(lim) else 'center', va='top')

        ax.set_xlim(lim)
        ax.set_ylim(lim)
        set_loc(ax, nbins=4, minor=2)

    for ny, nx in zip(*np.tril_indices_from(axes, k=-1)):
        H, xedges, yedges = np.histogram2d(
            chain[nx], chain[ny], bins=100, range=(ranges[nx], ranges[ny])
        )
        H[H == 0] = None
        cmap = highlight_cmap if (ny, nx) == (5, 4) else normal_cmap
        axes[ny][nx].pcolorfast(xedges, yedges, H.T, cmap=cmap)

        axes[nx][ny].set_axis_off()

    for n, label in enumerate(labels):
        axes[-1][n].set_xlabel(label)
        axes[n][0].set_ylabel(label)

    finish()


@plot
def observables_samples(calibration, exp_data, **kwargs):
    id_parts = [
        ('pion',   r'$\pi^\pm$', 'Blues'),
        ('kaon',   r'$K^\pm$', 'Greens'),
        ('proton', r'$p\bar p$', 'Reds')
    ]

    flows = [(str(n), '$v_{}$'.format(n), c)
             for n, c in enumerate(['GnBu', 'Purples', 'Oranges'], start=2)]

    plots = [
        ('dN_dy', 'Identified particle yields', r'$dN/dy$', (1, 3e3),
         id_parts),
        ('mean_pT', 'Identified particle mean $p_T$',
         r'$p_T$ [GeV]', (0, 1.5), id_parts),
        ('vn', 'Flow cumulants', r'$v_n\{2\}$', (0, 0.11), flows),
    ]

    fig, axes = plt.subplots(nrows=len(plots), figsize=(8, 15))

    with \
            h5py.File(calibration, 'r') as cal, \
            h5py.File(exp_data, 'r') as exp:
        sample_idx = np.random.randint(0, cal['chain'].shape[0], size=100)

        for ax, (obs, title, ylabel, ylim, subplots) in zip(axes, plots):
            for subobs, label, cmap in subplots:
                color = getattr(plt.cm, cmap)(0.6)

                samples_dset = cal['samples'][obs][subobs]
                x, y, yerr = (exp[obs][subobs][k][:samples_dset.shape[1]]
                              for k in ['x', 'y', 'yerr'])

                for i in sample_idx:
                    ax.plot(x, samples_dset[i],
                            color=color, alpha=0.2, lw=0.5)

                ax.errorbar(x, y, yerr=yerr, fmt='o',
                            capsize=0, color='0.2', zorder=1000)

                ax.text(x[-1] + 2, y[-1], label, ha='left', va='center',
                        size=fontnormal)

            ax.set_xlim(0, 70)
            ax.set_ylim(ylim)
            ax.set_ylabel(ylabel, labelpad=10)
            ax.set_title(title)

            if obs == 'dN_dy':
                ax.set_yscale('log')
                ax.minorticks_off()
            else:
                set_loc(ax, 'y', nbins=6)

    axes[-1].set_xlabel('Centrality %', labelpad=10)

    finish(h_pad=1)


def _zetas(T, Tc=0.180,
           A1=-13.77, A2=27.55, A3=13.45,
           lam1=0.9, lam2=0.25, lam3=0.9, lam4=0.22,
           sig1=0.025, sig2=0.13, sig3=0.0025, sig4=0.022):
    t = np.asarray(T)/Tc
    zetas = np.empty_like(t)

    low = t < 0.995
    xm1 = t[low] - 1
    zetas[low] = lam3*np.exp(xm1/sig3) + lam4*np.exp(xm1/sig4) + 0.03

    high = t > 1.05
    xm1 = t[high] - 1
    zetas[high] = lam1*np.exp(-xm1/sig1) + lam2*np.exp(-xm1/sig2) + 0.001

    mid = ~(low | high)
    x = t[mid]
    zetas[mid] = A1*x*x + A2*x - A3

    return zetas


@plot
def viscosity_samples(calibration, **kwargs):
    fig, axes = plt.subplots(nrows=2, figsize=(7.85, 9))
    etas_ax, zetas_ax = axes

    Tmin, Tc, Tmax = 0.145, 0.154, 0.300
    T1 = np.linspace(Tmin, Tmax, 1000)
    T2 = np.linspace(Tc, Tmax, 100)

    line_kwargs = dict(color=plt.cm.Blues(0.7), alpha=0.2, lw=0.7)

    with h5py.File(calibration, 'r') as cal:
        sample_idx = np.random.randint(0, cal['chain'].shape[0], size=200)

        for i in sample_idx:
            etas_min, etas_slope, zetas_norm = cal['chain'][i, 5:8]
            etas_ax.plot(T2, etas_min + etas_slope*(T2 - Tc), **line_kwargs)
            zetas_ax.plot(T1, zetas_norm*_zetas(T1), **line_kwargs)

    text_kwargs = dict(fontsize=20)
    fill_kwargs = dict(color='0.9', zorder=-1000)

    etas_ax.fill_between(T2, 0.3 + 2*(T2 - Tc), **fill_kwargs)
    etas_ax.axvline(Tc, ls='dashed', lw=1, color='0.3')
    etas_ax.text(Tc + 0.003, 0.5, '$T_c = \,{}$ GeV'.format(Tc),
                 ha='left', va='center', **text_kwargs)

    points = etas_ax.transData.transform([
        (Tc, 0.3),
        (Tmax, 0.3 + 2*(Tmax-Tc))
    ])
    dx, dy = points[1] - points[0]
    angle = 180/np.pi * np.arctan2(dy, dx)
    etas_ax.text((Tmax + Tc)/2, 0.28 + Tmax - Tc, 'initial range',
                 rotation=angle, ha='center', **text_kwargs)

    etas_ax.text(
        0.205, 0.03,
        '$(\eta/s)(T) =\,'
        '(\eta/s)_\mathrm{min} + (\eta/s)_\mathrm{slope}(T - T_c)$',
        **text_kwargs
    )
    etas_ax.set_ylabel(r'$\eta/s$', labelpad=10)

    zetas_ax.plot(T1, _zetas(T1), color=offblack, lw=2)
    zetas_ax.fill_between(T1, 2*_zetas(T1), **fill_kwargs)
    zetas_ax.text(0.193, 0.52, 'initial range', **text_kwargs)
    zetas_ax.text(
        0.22, 0.40,
        '$(\zeta/s)(T)$ from Denicol et. al.\n'
        'vary overall normalization\n'
        'black line: norm = 1',
        va='top', **text_kwargs
    )
    zetas_ax.set_xlabel('Temperature [GeV]', labelpad=10)
    zetas_ax.set_ylabel(r'$\zeta/s$', labelpad=10)

    for ax in axes:
        ax.set_xticks(np.arange(150, 301, 50)/1000)
        ax.set_xlim(Tmin, Tmax)

    finish(h_pad=1)


@plot
def mode_observables(batch_obs_mode, exp_data, **kwargs):
    id_parts = [
        ('pion',   r'$\pi^\pm$', 'Blues'),
        ('kaon',   r'$K^\pm$', 'Greens'),
        ('proton', r'$p\bar p$', 'Reds')
    ]

    flows = [(str(n), '$v_{}$'.format(n), c)
             for n, c in enumerate(['GnBu', 'Purples', 'Oranges'], start=2)]

    plots = [
        ('dN_dy', 'Identified particle yields', r'$dN/dy$', (1, 3e3),
         id_parts),
        ('mean_pT', 'Identified particle mean $p_T$',
         r'$p_T$ [GeV]', (0, 1.5), id_parts),
        ('vn', 'Flow cumulants', r'$v_n\{2\}$', (0, 0.11), flows),
    ]

    fig = plt.figure(figsize=(25, 9))
    gs = plt.GridSpec(3, len(plots))

    with \
            h5py.File(batch_obs_mode, 'r') as mode, \
            h5py.File(exp_data, 'r') as exp:
        for n, (obs, title, ylabel, ylim, subplots) in enumerate(plots):
            ax = fig.add_subplot(gs[:2, n])
            ratio_ax = fig.add_subplot(gs[2, n])

            for subobs, label, cmap in subplots:
                color = getattr(plt.cm, cmap)(0.7)
                ncent = min(i[obs][subobs]['x'].size for i in [mode, exp])

                x = mode[obs][subobs]['x'][:ncent]
                y = mode[obs][subobs]['Y'][0, :ncent]
                ax.plot(x, y, color=color, lw=1.7)

                yexp, yexperr = (exp[obs][subobs][k][:ncent]
                                 for k in ['y', 'yerr'])
                ax.errorbar(x, yexp, yerr=yexperr, fmt='o',
                            capsize=0, color='0.2', zorder=1000)

                ax.text(x[-1] + 3, y[-1], label, ha='left', va='center',
                        size=fontnormal)

                ratio_ax.plot(x, y/yexp, color=color, lw=2)

            ax.set_ylim(ylim)
            ax.set_ylabel(ylabel, labelpad=10)
            ax.set_title(title)

            if obs == 'dN_dy':
                ax.set_yscale('log')
                ax.minorticks_off()
            else:
                set_loc(ax, 'y', nbins=6)

            ratio_ax.axhline(1, color='0.5', lw=1, zorder=-100)
            ratio_ax.axhspan(0.9, 1.1, color='0.95', zorder=-200)

            ratio_ax.set_xlabel('Centrality %', labelpad=10)
            ratio_ax.set_ylim(0.8, 1.2)
            ratio_ax.set_yticks(np.arange(80, 121, 10)/100)
            ratio_ax.set_ylabel('Ratio', labelpad=10)

    finish(pad=0.2, h_pad=0.5, w_pad=1.5)


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument('--design', default='../data/model/design.hdf')
    parser.add_argument('--calibration', default='../calibration/results.hdf')
    parser.add_argument('--exp-data', default='../data/exp/data.hdf')
    parser.add_argument('--batch-obs-mode', default='../data/model/batch-observables-mode.hdf')

    parser.add_argument('plots', nargs='*')

    args = parser.parse_args()

    if args.plots:
        for i in args.plots:
            if i.endswith('.pdf'):
                i = i[:-4]
            if i in plot_functions:
                plot_functions[i](**vars(args))
            else:
                print('unknown plot:', i)
    else:
        for f in plot_functions.values():
            f(**vars(args))


if __name__ == "__main__":
    main()
